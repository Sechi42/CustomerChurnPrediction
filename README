# Predicción de Cancelación de Clientes - Interconnect

## Descripción del Proyecto

El operador de telecomunicaciones **Interconnect** busca prever la tasa de cancelación de sus clientes. Si se identifica que un cliente planea cancelar su servicio, se le ofrecerán códigos promocionales y opciones de planes especiales para retenerlo. Este proyecto tiene como objetivo construir un modelo que prediga la probabilidad de cancelación de clientes, utilizando machine learning.

El proyecto incluye un pipeline completamente modularizado, que permite reutilizar el modelo entrenado en diversas plataformas de despliegue como Streamlit, FastAPI o Flask.

### Servicios de Interconnect

Interconnect ofrece una variedad de servicios que incluyen:

1. **Comunicación por teléfono fijo:** Se puede conectar a varias líneas.
2. **Internet:** A través de DSL o fibra óptica.
3. Otros servicios como:
   - **Seguridad en Internet** (ProtecciónDeDispositivo, SeguridadEnLínea).
   - **Soporte técnico**.
   - **Almacenamiento en la nube** (BackupOnline).
   - **Streaming de TV** y **directorio de películas**.

Los clientes pueden optar por contratos mensuales o firmar contratos de 1 o 2 años. Además, pueden pagar con varios métodos y recibir facturas electrónicas.

### Datos Utilizados

El proyecto utiliza datos de cuatro archivos principales:

- `contract.csv`: Información del contrato.
- `personal.csv`: Datos personales del cliente.
- `internet.csv`: Información sobre los servicios de Internet.
- `phone.csv`: Información sobre los servicios telefónicos.

Cada archivo contiene una columna `customerID` que identifica de forma única a cada cliente. Los datos son válidos a partir del 1 de febrero de 2020.

### Características del Modelo

- **Característica objetivo:** La columna `'EndDate'`, donde `'No'` indica que el cliente sigue activo.
- **Métrica principal:** AUC-ROC.
- **Métrica adicional:** Exactitud (Accuracy).

#### Criterios de Evaluación

- **AUC-ROC < 0.75:** 0 SP
- **0.75 ≤ AUC-ROC < 0.81:** 4 SP
- **0.81 ≤ AUC-ROC < 0.85:** 4.5 SP
- **0.85 ≤ AUC-ROC < 0.87:** 5 SP
- **0.87 ≤ AUC-ROC < 0.88:** 5.5 SP
- **AUC-ROC ≥ 0.88:** 6 SP

### Resultados del Proyecto

Se entrenaron cuatro modelos: regresión logística, bosque aleatorio, boosting por descenso de gradiente y una red neuronal. El objetivo era obtener un AUC-ROC superior a 0.88, lo cual se logró con el modelo de red neuronal.

Los mejores modelos fueron:

- **Red Neuronal:**
  - AUC-ROC: 0.93
  - Accuracy: 0.89
- **Boosting por Descenso de Gradiente:**
  - AUC-ROC: 0.94
  - Accuracy: 0.90

## Estructura Modularizada del Proyecto

Este proyecto está completamente modularizado, permitiendo su fácil integración con plataformas de despliegue como **Streamlit**, **FastAPI** o **Flask**. Los datos se procesan y el modelo se entrena mediante un pipeline automatizado y adaptable.

### Estructura del Directorio

```bash

├── MANIFEST.in
├── README.md
├── VERSION
├── __init__.py
├── config
│   ├── __init__.py
│   └── config.py
├── datasets
│   ├── __init__.py
│   ├── test.csv
│   ├── train.csv
│   ├── contract.csv
│   ├── internet.csv
│   ├── personal.csv
│   └── phone.csv
├── pipeline.py
├── predict.py
├── processing
│   ├── __init__.py
│   ├── data_handling.py
│   └── preprocessing.py
├── trained_models
│   ├── __init__.py
│   └── classification.pkl
├── training_pipeline.py
├── requirements.txt
├── setup.py
└── tests
    ├── pytest.ini
    └── test_prediction.py



## Running Locally

Add PYTHONPATH variable for `~/.bash_profile ` for MacOS
```export PYTHONPATH="/Users/nachiketh/Desktop/author-repo/Complete-MLOps-BootCamp/Packaging-ML-Model/packaging-ml-model:$PYTHONPATH"
```

## Virtual Environment
Install virtualenv

```python
python3 -m pip install virtualenv
```

Check version
```python
virtualenv --version
```

Create virtual environment

```python
virtualenv ml_package
```

Activate virtual environment

For Linux/Mac
```python
source ml_package/bin/activate
```
For Windows
```python
ml_package\Scripts\activate
```

Deactivate virtual environment

```python
deactivate
```



```
